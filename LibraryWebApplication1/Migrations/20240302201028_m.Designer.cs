// <auto-generated />
using System;
using LibraryWebApplication1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryWebApplication1.Migrations
{
    [DbContext(typeof(DblibraryContext))]
    [Migration("20240302201028_m")]
    partial class m
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryWebApplication1.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<string>("ArticleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("description")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorUsername")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("authorUsername")
                        .IsFixedLength();

                    b.Property<DateOnly?>("PublishDate")
                        .HasColumnType("date")
                        .HasColumnName("publishDate");

                    b.HasKey("CommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.SearchRequest", b =>
                {
                    b.Property<int>("SearchRequestId")
                        .HasColumnType("int")
                        .HasColumnName("searchRequestId");

                    b.Property<string>("RequestedAuthor")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("requestedAuthor")
                        .IsFixedLength();

                    b.Property<string>("RequestedCategory")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("requestedCategory")
                        .IsFixedLength();

                    b.Property<DateOnly?>("RequestedDate")
                        .HasColumnType("date")
                        .HasColumnName("requestedDate");

                    b.Property<string>("RequestedName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("requestedName")
                        .IsFixedLength();

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("SearchRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequest", (string)null);
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("username")
                        .IsFixedLength();

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.Article", b =>
                {
                    b.HasOne("LibraryWebApplication1.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Article_User");

                    b.HasOne("LibraryWebApplication1.Models.Category", "CategoryNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_Category");

                    b.Navigation("Author");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.Comment", b =>
                {
                    b.HasOne("LibraryWebApplication1.Models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK_Comment_Article");

                    b.HasOne("LibraryWebApplication1.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.SearchRequest", b =>
                {
                    b.HasOne("LibraryWebApplication1.Models.User", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SearchRequest_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("LibraryWebApplication1.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("SearchRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
