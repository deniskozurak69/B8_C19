@{
    ViewBag.Title = "Users Map";
}

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Users Locations</title>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        #map {
            width: 100%;
            height: 600px;
        }

        #filter {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>Users Locations</h1>
    <div id="filter">
        <label for="usernameFilter">Username:</label>
        <select id="usernameFilter">
            <option value="">Select all</option>
        </select>
        <button id="filterButton">Filter</button>
    </div>
    <div id="map"></div>

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.js"></script>
    <script>
        mapboxgl.accessToken = '@(ViewBag.MapboxAccessToken)';

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [30.5238, 50.4547], 
            zoom: 4
        });

        var markers = [];

        function loadMarkers(filter) {
            fetch('/Users/GetUsersLocations')
                .then(response => response.json())
                .then(users => {
                    
                    markers.forEach(marker => marker.remove());
                    markers = [];

                    
                    if (filter) {
                        users = users.filter(user => user.username === filter);
                    }

                    
                    users.forEach(user => {
                        var marker = new mapboxgl.Marker()
                            .setLngLat([user.longtitude, user.latitude])
                            .setPopup(new mapboxgl.Popup({ offset: 25 })
                                .setText(`User: ${user.username},` + `ID: ${user.userId}`))
                            .addTo(map);
                        markers.push(marker);
                    });
                })
                .catch(error => console.error('Error fetching user locations:', error));
        }

        function populateUserDropdown() {
            fetch('/Users/GetUsersLocations')
                .then(response => response.json())
                .then(users => {
                    var select = document.getElementById('usernameFilter');
                    users.forEach(user => {
                        var option = document.createElement('option');
                        option.value = user.username;
                        option.text = user.username;
                        select.add(option);
                    });
                })
                .catch(error => console.error('Error fetching users:', error));
        }

        document.getElementById('filterButton').addEventListener('click', function () {
            var filter = document.getElementById('usernameFilter').value;
            loadMarkers(filter);
        });

        
        populateUserDropdown();

        
        loadMarkers();

        
        setInterval(() => {
            var filter = document.getElementById('usernameFilter').value;
            loadMarkers(filter);
        }, 60000);
    </script>
</body>
</html>